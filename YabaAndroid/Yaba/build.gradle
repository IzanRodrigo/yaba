buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
    }
}
apply plugin: 'android'

project.ext.versionName = "manifest"
project.ext.versionCode = 0

repositories {
    mavenCentral()
}

configurations {
    apt
}

dependencies {

    compile project(':Volley')
    compile project(':PagerSlidingTabStrip')

    //Jake Wharton
    apt 'com.jakewharton:butterknife:3.0.0'
    compile 'com.jakewharton:butterknife:3.0.0'
    compile 'com.jakewharton.timber:timber:1.1.0'

    //Square
    apt 'com.squareup.dagger:dagger-compiler:1.1.0'
    compile 'com.squareup.dagger:dagger:1.1.0'
    compile 'com.squareup:otto:1.3.4'

    //Parsing
    compile 'com.google.code.gson:gson:2.2.4'
    compile('com.thoughtworks.xstream:xstream:1.4.5') {
        //It's in the android jar
        exclude module: 'xmlpull'
    }
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18
    }

    signingConfigs {
        release {
            storeFile file("yabakeystore.jks")
            keyAlias 'Yaba'
            storePassword ">implying I will put it here"
            keyPassword ">implying I will put it here"
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix ".d"
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        free {
            packageName "com.pilasvacias.yaba.free"
            minSdkVersion 14
        }

        pro {
            packageName "com.pilasvacias.yaba.pro"
            minSdkVersion 14
        }
    }
}

android.applicationVariants.all { variant ->
    android.ext.aptOut = file("${project.buildDir}/source/apt/${variant.dirName}")
    variant.javaCompile.doFirst {
        android.ext.aptOut.mkdirs()
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-s', android.ext.aptOut
        ]
    }
}

//noinspection GroovyAssignabilityCheck
task releaseInfo << {
    project.ext.pass = System.console().readLine("\nEnter keystore password: ")
    project.ext.versionName = System.console().readLine("Enter version name: ")
    project.ext.versionCode = System.console().readLine("Enter version code: ")
    android.signingConfigs.release.storePassword = project.ext.pass
    android.signingConfigs.release.keyPassword = project.ext.pass
    android.defaultConfig.versionName = project.ext.versionName
    android.defaultConfig.versionCode = project.ext.versionCode.toInteger()
}

//noinspection GroovyAssignabilityCheck
task buildSigned(dependsOn: build) << {
    copy {
        ext.vn = project.ext.versionName
        ext.vc = project.ext.versionCode

        from "${project.buildDir}/apk"
        into "${project.rootDir}/apks/${vn}"
        include "*-release.apk"
        rename '(.*)-release(\\.apk)', '$1' + "-${vn}-${vc}" + '$2'
    }
}

if (project.hasProperty('signedApk') && System.console() != null) {
    tasks.whenTaskAdded { task ->
        println task.name
        if (task.name.matches('^package.*Release$')) {
            task.dependsOn('releaseInfo')
        }
    }
} else {
    android.buildTypes.release.signingConfig = null
}


