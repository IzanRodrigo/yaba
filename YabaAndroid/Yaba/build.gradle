buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

configurations {
    apt
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 18
    }

    signingConfigs {
        release {
            storeFile file("yabakeystore.jks")
            keyAlias 'Yaba'
            storePassword 'pilasvacias'
            keyPassword 'pilasvacias'
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix ".d"
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        free {
            packageName "com.pilasvacias.yaba.free"
        }

        pro {
            packageName "com.pilasvacias.yaba.pro"
        }
    }
}

dependencies {

    compile project(':Volley')
    compile project(':PagerSlidingTabStrip')
    compile 'com.android.support:support-v13:18.0.0'
    compile 'com.android.support:support-v4:18.0.0'

    //Jake Wharton
    apt 'com.jakewharton:butterknife:3.0.0'
    compile 'com.jakewharton:butterknife:3.0.0'
    compile 'com.jakewharton.timber:timber:1.1.0'

    //Square
    apt 'com.squareup.dagger:dagger-compiler:1.1.0'
    compile 'com.squareup.dagger:dagger:1.1.0'
    compile 'com.squareup:otto:1.3.4'

    //Parsing
    compile 'com.google.code.gson:gson:2.2.4'
    compile('com.thoughtworks.xstream:xstream:1.4.5') {
        //It's in the android jar
        exclude module: 'xmlpull'
    }

    instrumentTestCompile 'junit:junit:3.8'

    //instrumentTestCompile 'junit:junit:4.10'
    //instrumentTestCompile 'org.robolectric:robolectric:2.2'
}

android.applicationVariants.all { variant ->
    android.ext.aptOut = file("${project.buildDir}/source/apt/${variant.dirName}")
    variant.javaCompile.doFirst {
        android.ext.aptOut.mkdirs()
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-s', android.ext.aptOut
        ]
    }
}

//noinspection GroovyAssignabilityCheck
task readApkInfo << {
    println "---------------------------------------------------------"
    //ext.pass = System.console().readLine("\nEnter keystore password: ")
    ext.versionName = System.console().readLine("Enter version name: ")
    ext.versionCode = System.console().readLine("Enter version code: ")
    //android.signingConfigs.release.storePassword = ext.pass
    //android.signingConfigs.release.keyPassword = ext.pass
    android.defaultConfig.versionName = ext.versionName
    android.defaultConfig.versionCode = ext.versionCode.toInteger()
    println "---------------------------------------------------------"
}

task buildSigned(dependsOn: [assembleRelease, check]) {
    description = 'Anchor task for assembleRelease and check that will move resulting apks to /apks'
    doLast {
        copy {
            if (project.hasProperty('consoleSigning')) {
                ext.vn = readApkInfo.ext.versionName
                ext.vc = readApkInfo.ext.versionCode
            } else {
                ext.vn = "auto"
                ext.vc = "0"
            }

            from "${project.buildDir}/apk"
            into "${project.rootDir}/apks/${vn}"
            include "*-release.apk"
            rename '(.*)-release(\\.apk)', '$1' + "-${vn}-${vc}" + '$2'

            println "-------------------------------------------------------"
            println "Version name: ${vn}"
            println "Version code: ${vc}"
            println "Resulting apks are under ${project.rootDir}/apks/${vn}"
            println "-------------------------------------------------------"
        }
    }
}

if (project.hasProperty('consoleSigning')) {
    tasks.whenTaskAdded { task ->
        if (task.name.matches('^pre.*Build$')) {
            task.dependsOn readApkInfo
        }
    }
} else {
    //android.buildTypes.release.signingConfig = null
}


